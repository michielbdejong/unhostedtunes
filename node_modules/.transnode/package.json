{
  "name": "TransNode",
  "version": "0.1.0",
  "description": "Lightweight Web Worker API implementation with native threads",
  "keywords": [
    "threads",
    "transmission",
    "torrent"
  ],
  "author": {
    "name": "Fernando Martín",
    "email": "fernancoder@gmail.com"
  },
  "homepage": "https://github.com/fernancoder/TransNode",
  "bugs": {
    "url": "https://github.com/fernancoder/TransNode/issues",
    "email": "fernancoder@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/fernancoder/TransNode.git"
  },
  "gypfile": true,
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "install": "node-gyp rebuild"
  },
  "readme": "TransNode\n=========\n\nnode.js C++ torrent module based on libstransmission (without RPC)\n\nthis library in process of change...\n * not yet compatible with node 0.10.x\n * examples do not yet exist (to show off its power)\n * I want to change over to (err, res) callback format\n\n## API\n\n### open\n`open(<String> config_dir_path, <Function> callback)`\n\n * `config_dir_path` is a path to a directory on the local disk in which all of transmission's configuration will be saved (used for reloading sessions and the like)\n\n```\ncallback(obj)\n{\n\terrorStatus: <Integer>\n}\n```\n\n### add\n`add(<String> path, <Function> callback)`\n\n * `path` can be a string with a magnet url, a local file, or an http link\n\n```\ncallback(obj)\n{\n\terrorStatus: <Integer>\n\tlinkType: <Integer>\n}\n```\n\n\n### list\n`list(<Function> callback)`\n\n\n### start\n`start(<Integer> TorrentId, <Function> callback)`\n```\ncallback(obj)\n{\n\terrorStatus: <Integer>\n}\n```\n\n### stop\n`stop(<Integer> TorrentId, <Function> callback)`\n```\ncallback(obj)\n{\n\terrorStatus: <Integer>\n}\n```\n\n### remove\n`remove(<Integer> TorrentId, <Boolean> delete_local_data, <Function> callback)`\n```\ncallback(obj)\n{\n\terrorStatus: <Integer>\n}\n```\n\n\n### mp3ToTorrent\n`mp3ToTorrent(<String> mp3_path, <Object> options, <Function> callback)`\n\nthis function takes an MP3 file as an argument, with options:\n```\noptions = {\n\tuframeDirectory: <String>\n\ttorrentDirectory: <String>\n\tpieceSize: <Integer>\n}\n```\n\n```\ncallback(obj)\n{\n\terrorStatus: <Integer>\n\torgFilePath: <String>\n\tuframeHash: <String>\n\tuframeFilePath: <String>\n\ttorrentFilePath: <String>\n\tpieceSize: <Integer>\n}\n```\n\n## TODO\n\n * remove rpc-server\n * convert over file, socket, udp, threads, etc. implementations over to libuv\n * import and convert the existing libtransmission tests\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2013 Fernando Martín &lt;fernancoder@gmail.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "TransNode@0.1.0",
  "dist": {
    "shasum": "0e2898f7d7cc4a10570b677e29320ae0c68b697c"
  },
  "_from": "../TransNode"
}
